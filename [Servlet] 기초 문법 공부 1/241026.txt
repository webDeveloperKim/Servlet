port
항구

한번에 둘 이상의 연결을 할때 필요함

데이터( 패킷 ) 기본단위

DSN 도메인네임서버
google.com 200.200.200.2

정리
: 아이피는 데이터 통신에 필요한 고유 주소 정보
: 포트는 동일한 하나의 아이피 안에서 동작하는 여러 애플리케이션을 구분하기 위함
: dns는 도메인으로 ip를 매핑해서 사용

> 통합 리소스 식별자
URL
URI
--URN

* html 영상 텍스트 json

http 80
http + 보안 443

HTTP 요청메시지 기본 문법
GET /search?q=hello&hi=ko HTTP/1.1

웹 이라는 건
모두 가 HTTP(프로토콜)를 기반으로 통신합니다

웹브라우저에 URL을 치고 들어가면
1. 인터넷을 통해서 서버에 접근을 하고
2. 서버는 응답 HTML을 만들어서 클라이언트에 내려줌

웹서버는 무엇인가
-> NGINX
HTTP를 기반으로 동작하는 서버가 웹서버
-> 정적 리소스를 제공, 기타 부가기능을 함

html css js 이미지 영상 같은 파일들을 넣어두면
서버가 그 파일들을 전달해줌

웹애플리케이션 서버(was)
-> 톰캣

웹 시스템의 구성
WEB, WAS, DB

웹서버는 계산하는게 거의 없어서 서버가 잘 죽지않음
근데 비즈니스 로직을 담당하는 WAS서버는
진짜 다양한 사유로 뻗음

그래서 우리는 각 기능별로 나눠서 시스템을 구성해야하고
그렇게 되면
WAS나 DB가 장애가 생겼을때
WEB서버가 해당하는 오류 화면을 제공할 수 이씀

GET /search?q=hello&hi=ko HTTP/1.1

--요청 http 메시지
POST / submit-form HTTP1.1
Host:localhost:8080
ContentType : application/x-www-form-urlencoded

name=홍길동&email=yj.ryu@gmail.com

--응답 http 메시지
HTTP/1.1 200OK
Content-Type: text/html; charset=UTF-8
Content-Length : 13456464

<html>
	<body></body>
</html>

서블릿에서의 HTTP 요청, 응답 흐름

HTTP 요청시에
WAS는 Request, Response 객체를 새로 만들어서 서블릿 객체를 호출함
개발자는 Request 객체에서 HTTP 요청정보를 꺼내서 사용함
개발자는 Response 객체에 HTTP 응답정보를 편리하게 입력합니다.
WAS는 Request 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성

서블릿 
- 서블릿 컨테이너

톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함
서블리 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 
종료까지의 생명주기를 관리

서블릿 객체는 싱글톤으로 관리
-> 고객의 요청이 올때마다 계속 객체를 생성하는거는 엄청난 비효율
-> 최초로 로딩하는 시점에 서블릿 객체를 미리 만들어두고 계속 재활용
-> 이후의 요청들은 동일한 서블릿 객체의 인스턴스에 접근

****그래서 주의사항
공유변수 Static 변수 사용주의

-> 서블릿 컨테이너가 종료되는 시점에 모든 자원 반환

====================================================

HTTP 매서드 종류
주요 메서드

GET
POST
PUT (~ UPDATE, 완전 싹다 치환)
PATCH (~ UPDATE, 일부분만)
DELETE


























